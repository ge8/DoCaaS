AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Deck of Cards As A Service

    SAM Template for the Deck of Cards As A Service Application Suite
    
Globals:
    Function:
        Timeout: 20

Resources:
    DeckDataAccessFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: deck-da.deck_data_access
            FunctionName: DOCAAS_DeckDataAccess
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    GameDataAccessFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: game-da.game_data_access
            FunctionName: DOCAAS_GameDataAccess
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    CreateDeckFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: create.create_deck_handler
            FunctionName: DOCAAS_CreateDeck
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    GetDeckFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: get.get_deck_handler
            FunctionName: DOCAAS_GetDeck
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    ShuffleDeckFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: shuffle.shuffle_deck_handler
            FunctionName: DOCAAS_ShuffleDeck
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    CutDeckFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: cut.cut_deck_handler
            FunctionName: DOCAAS_CutDeck
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    GameFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: game.demo_game_handler
            FunctionName: DOCAAS_Game
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
    AuthoriserFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: authoriser.authorise_request
            FunctionName: DOCAAS_Authoriser
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
            Environment:
                Variables:
                    USER_POOL_ID: cognito-idp.ap-southeast-2.amazonaws.com/ap-southeast-2_NA2izZ6e4
    CorsFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/
            Runtime: nodejs8.10
            Handler: cors.handle_request
            FunctionName: DOCAAS_Cors
            Role: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA

    RestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: docaas-api

    PlanAuthorizer: 
        Type: AWS::ApiGateway::Authorizer
        Properties: 
            AuthorizerCredentials: arn:aws:iam::604674757980:role/DOCAAS_LAMBDA
            AuthorizerResultTtlInSeconds: 600
            AuthorizerUri: 
                Fn::Join: 
                    - ""
                    - 
                        - "arn:aws:apigateway:"
                        - Ref: AWS::Region
                        - ":lambda:path/2015-03-31/functions/"
                        - Fn::GetAtt: 
                            - "AuthoriserFunction"
                            - "Arn"
                        - "/invocations"
            Type: TOKEN
            IdentitySource: method.request.header.Authorization
            Name: DocaasPlanAuthoriser
            RestApiId: !Ref RestApi

    AuthoriserInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "AuthoriserFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"

    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - "GetDeckApiMethod"
        Properties:
            RestApiId: !Ref "RestApi"
            StageName: Prod

    InvokeCorsLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "CorsFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"
            
    GetDeckApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: get
            RestApiId: !Ref RestApi
    GetDeckApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: ANY
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref PlanAuthorizer
            ResourceId: !Ref GetDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "GetDeckFunction.Arn"
    GetDeckInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "GetDeckFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/get"
    GetDeckOptionsApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            ResourceId: !Ref GetDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CorsFunction.Arn"

    CreateDeckApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: create
            RestApiId: !Ref RestApi
    CreateDeckApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: ANY
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref PlanAuthorizer
            ResourceId: !Ref CreateDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CreateDeckFunction.Arn"
    CreateDeckInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "CreateDeckFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/create"
    CreateDeckOptionsApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            ResourceId: !Ref CreateDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CorsFunction.Arn"




    ShuffleDeckApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: shuffle
            RestApiId: !Ref RestApi
    ShuffleDeckApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: ANY
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref PlanAuthorizer
            ResourceId: !Ref ShuffleDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "ShuffleDeckFunction.Arn"
    ShuffleDeckInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "ShuffleDeckFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/shuffle"
    ShuffleDeckOptionsApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            ResourceId: !Ref ShuffleDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CorsFunction.Arn"


    CutDeckApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: cut
            RestApiId: !Ref RestApi
    CutDeckApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: ANY
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref PlanAuthorizer
            ResourceId: !Ref CutDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CutDeckFunction.Arn"
    CutDeckInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "CutDeckFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/cut"
    CutDeckOptionsApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            ResourceId: !Ref CutDeckApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CorsFunction.Arn"
    
    
    GameApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: game
            RestApiId: !Ref RestApi
    GameApiApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: ANY
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref PlanAuthorizer
            ResourceId: !Ref GameApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "GameFunction.Arn"
    GameInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "GameFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/game"
    GameOptionsApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            ResourceId: !Ref GameApiResource
            RestApiId: !Ref RestApi
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub 
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "CorsFunction.Arn"

Outputs:
    APIBaseURL:
        Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    DeckDataAccessFunction:
      Description: "Deck DataAccess Function ARN"
      Value: !GetAtt DeckDataAccessFunction.Arn
    GameDataAccessFunction:
      Description: "Game DataAccess Function ARN"
      Value: !GetAtt GameDataAccessFunction.Arn
    CreateDeckFunction:
      Description: "Create Deck Lambda Function ARN"
      Value: !GetAtt CreateDeckFunction.Arn
    GetDeckFunction:
      Description: "Get Deck Lambda Function ARN"
      Value: !GetAtt GetDeckFunction.Arn
    ShuffleDeckFunction:
      Description: "Shuffle Deck Lambda Function ARN"
      Value: !GetAtt ShuffleDeckFunction.Arn
    CutDeckFunction:
      Description: "Cut Deck Lambda Function ARN"
      Value: !GetAtt CutDeckFunction.Arn
    AuthoriserFunction:
      Description: "Plan Authoriser Function ARN"
      Value: !GetAtt AuthoriserFunction.Arn
